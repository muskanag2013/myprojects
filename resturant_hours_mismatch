-- Create temporary function for Uber Eats data
CREATE TEMP FUNCTION ExtractBusinessHoursWithExceptions(json_data STRING)
RETURNS ARRAY<STRUCT<param_name STRING, day_index INT, day_value BOOLEAN, start_time STRING, end_time STRING, is_exception BOOLEAN>>
LANGUAGE js
AS """
  try {
    const data = JSON.parse(json_data);
    
    // Find menus object
    let menus;
    if (data.data && data.data.menus) {
      menus = data.data.menus;
    } else if (data.menus) {
      menus = data.menus;
    } else {
      return [{param_name: 'Error', day_index: -1, day_value: false, start_time: 'No menus found', end_time: 'No menus found', is_exception: false}];
    }
    
    // Get first menu key and menu
    const firstMenuKey = Object.keys(menus)[0];
    if (!firstMenuKey) {
      return [{param_name: 'Error', day_index: -1, day_value: false, start_time: 'No menu keys found', end_time: 'No menu keys found', is_exception: false}];
    }
    
    const firstMenu = menus[firstMenuKey];
    
    // Check if sections exist
    if (!firstMenu.sections || firstMenu.sections.length === 0) {
      return [{param_name: 'Error', day_index: -1, day_value: false, start_time: 'No sections found', end_time: 'No sections found', is_exception: false}];
    }
    
    const firstSection = firstMenu.sections[0];
    
    // Check if regularHours exist
    if (!firstSection.regularHours || firstSection.regularHours.length === 0) {
      return [{param_name: 'Error', day_index: -1, day_value: false, start_time: 'No regular hours found', end_time: 'No regular hours found', is_exception: false}];
    }
    
    const regularHours = firstSection.regularHours[0];
    const defaultStartTime = regularHours.startTime || 'No start time';
    const defaultEndTime = regularHours.endTime || 'No end time';
    
    // Build a map of day exceptions if regularHoursExceptions exists
    const exceptions = {};
    if (firstSection.regularHoursExceptions && Array.isArray(firstSection.regularHoursExceptions)) {
      firstSection.regularHoursExceptions.forEach(exception => {
        if (exception.daysBitArray && Array.isArray(exception.daysBitArray)) {
          exception.daysBitArray.forEach((isException, dayIndex) => {
            if (isException) {
              exceptions[dayIndex] = {
                start_time: exception.startTime || defaultStartTime,
                end_time: exception.endTime || defaultEndTime
              };
            }
          });
        }
      });
    }
    
    // Create result with one row per daysBitArray entry
    const result = [];
    
    if (regularHours.daysBitArray && Array.isArray(regularHours.daysBitArray)) {
      regularHours.daysBitArray.forEach((value, index) => {
        // Check if there's an exception for this day
        const hasException = exceptions[index] !== undefined;
        const startTime = hasException ? exceptions[index].start_time : defaultStartTime;
        const endTime = hasException ? exceptions[index].end_time : defaultEndTime;
        
        result.push({
          param_name: 'daysBitArray',
          day_index: index,
          day_value: value,
          start_time: startTime,
          end_time: endTime,
          is_exception: hasException
        });
      });
    } else {
      // If no daysBitArray, still return one row with the hours
      result.push({
        param_name: 'No daysBitArray',
        day_index: -1,
        day_value: false,
        start_time: defaultStartTime,
        end_time: defaultEndTime,
        is_exception: false
      });
    }
    
    return result;
  } catch (error) {
    return [{
      param_name: 'Error: ' + error.message,
      day_index: -1,
      day_value: false,
      start_time: 'Error',
      end_time: 'Error',
      is_exception: false
    }];
  }
""";

-- Extract Uber Eats data
WITH uber_data AS (
  SELECT 
    vb_name AS uber_vb_name,
    slug AS uber_slug,
    hours.day_index,
    CASE hours.day_index
      WHEN 0 THEN 'MONDAY'
      WHEN 1 THEN 'TUESDAY'
      WHEN 2 THEN 'WEDNESDAY'
      WHEN 3 THEN 'THURSDAY'
      WHEN 4 THEN 'FRIDAY'
      WHEN 5 THEN 'SATURDAY'
      WHEN 6 THEN 'SUNDAY'
      ELSE 'UNKNOWN'
    END AS day_name,
    hours.start_time AS uber_start_time, 
    hours.end_time AS uber_end_time
  FROM
    `arboreal-vision-339901.take_home_v2.virtual_kitchen_ubereats_hours`,
    UNNEST(ExtractBusinessHoursWithExceptions(TO_JSON_STRING(response))) AS hours
  WHERE 
    hours.day_value IS TRUE
),

-- Extract Grubhub data
grubhub_data AS (
  SELECT 
    vr.slug AS grubhub_slug,
    vr.vb_name AS grubhub_vb_name,
    UPPER(JSON_EXTRACT_SCALAR(sr, '$.days_of_week[0]')) AS day_name,
    JSON_EXTRACT_SCALAR(sr, '$.from') AS grubhub_start_time,
    JSON_EXTRACT_SCALAR(sr, '$.to') AS grubhub_end_time
  FROM 
    `arboreal-vision-339901.take_home_v2.virtual_kitchen_grubhub_hours` AS vr,
    UNNEST(JSON_EXTRACT_ARRAY(vr.response, '$.availability_by_catalog.STANDARD_DELIVERY.schedule_rules')) AS sr
  WHERE
    JSON_EXTRACT(sr, '$.days_of_week') IS NOT NULL
),

-- Format business hours string for each platform
formatted_hours AS (
  SELECT
    g.grubhub_slug,
    g.grubhub_vb_name,
    u.uber_slug,
    u.uber_vb_name,
    g.day_name,
    CONCAT(g.day_name, ': ', 
           SUBSTR(g.grubhub_start_time, 1, 5), ' - ', 
           SUBSTR(g.grubhub_end_time, 1, 5)) AS grubhub_hours,
    CONCAT(u.day_name, ': ', 
           SUBSTR(u.uber_start_time, 1, 5), ' - ', 
           SUBSTR(u.uber_end_time, 1, 5)) AS uber_hours,
    -- Parse time strings to compare them - using SAFE_PARSE to handle possible format mismatches
    SAFE.PARSE_TIME('%H:%M:%S', g.grubhub_start_time) AS gh_start,
    SAFE.PARSE_TIME('%H:%M:%S', g.grubhub_end_time) AS gh_end,
    SAFE.PARSE_TIME('%H:%M', u.uber_start_time) AS ue_start,
    SAFE.PARSE_TIME('%H:%M', u.uber_end_time) AS ue_end
  FROM 
    grubhub_data g
  FULL OUTER JOIN 
    uber_data u
  ON 
    g.grubhub_slug = u.uber_slug AND
    g.day_name = u.day_name
)

-- Generate final output with range comparison
SELECT
  grubhub_slug AS `Grubhub slug`,
  grubhub_hours AS `Virtual Restuarant Business Hours`,
  uber_slug AS `Uber Eats slug`,
  uber_hours AS `Uber Eats Business Hours`,
  CASE
    WHEN (gh_start = ue_start AND gh_end = ue_end) 
      THEN 'In Range'
    WHEN (gh_start IS NOT NULL AND ue_start IS NOT NULL AND gh_end IS NOT NULL AND ue_end IS NOT NULL AND
          ABS(TIME_DIFF(gh_start, ue_start, MINUTE)) <= 5 AND
          ABS(TIME_DIFF(gh_end, ue_end, MINUTE)) <= 5)
      THEN 'Out of Range with 5 mins difference between GH and UE'
    ELSE 'Out of Range'
  END AS `is_out_range_expected_output`
FROM 
  formatted_hours
ORDER BY
  grubhub_slug,
  CASE 
    WHEN day_name = 'SUNDAY' THEN 1
    WHEN day_name = 'MONDAY' THEN 2
    WHEN day_name = 'TUESDAY' THEN 3
    WHEN day_name = 'WEDNESDAY' THEN 4
    WHEN day_name = 'THURSDAY' THEN 5
    WHEN day_name = 'FRIDAY' THEN 6
    WHEN day_name = 'SATURDAY' THEN 7
  END
